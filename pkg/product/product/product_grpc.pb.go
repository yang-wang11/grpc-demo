// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: product.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdServiceClient interface {
	// 定义方法
	GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	// 客户端发送stream
	UpdateProductStockClient(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProductStockClientClient, error)
	// 服务端发送stream
	UpdateProductStockServer(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_UpdateProductStockServerClient, error)
	// 双向
	UpdateProductStockBidirect(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProductStockBidirectClient, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) GetProductStock(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/product.ProdService/GetProductStock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) UpdateProductStockClient(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProductStockClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[0], "/product.ProdService/UpdateProductStockClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceUpdateProductStockClientClient{stream}
	return x, nil
}

type ProdService_UpdateProductStockClientClient interface {
	Send(*ProductRequest) error
	CloseAndRecv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceUpdateProductStockClientClient struct {
	grpc.ClientStream
}

func (x *prodServiceUpdateProductStockClientClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceUpdateProductStockClientClient) CloseAndRecv() (*ProductResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) UpdateProductStockServer(ctx context.Context, in *ProductRequest, opts ...grpc.CallOption) (ProdService_UpdateProductStockServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[1], "/product.ProdService/UpdateProductStockServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceUpdateProductStockServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProdService_UpdateProductStockServerClient interface {
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceUpdateProductStockServerClient struct {
	grpc.ClientStream
}

func (x *prodServiceUpdateProductStockServerClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *prodServiceClient) UpdateProductStockBidirect(ctx context.Context, opts ...grpc.CallOption) (ProdService_UpdateProductStockBidirectClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProdService_ServiceDesc.Streams[2], "/product.ProdService/UpdateProductStockBidirect", opts...)
	if err != nil {
		return nil, err
	}
	x := &prodServiceUpdateProductStockBidirectClient{stream}
	return x, nil
}

type ProdService_UpdateProductStockBidirectClient interface {
	Send(*ProductRequest) error
	Recv() (*ProductResponse, error)
	grpc.ClientStream
}

type prodServiceUpdateProductStockBidirectClient struct {
	grpc.ClientStream
}

func (x *prodServiceUpdateProductStockBidirectClient) Send(m *ProductRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *prodServiceUpdateProductStockBidirectClient) Recv() (*ProductResponse, error) {
	m := new(ProductResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdServiceServer is the server API for ProdService service.
// All implementations must embed UnimplementedProdServiceServer
// for forward compatibility
type ProdServiceServer interface {
	// 定义方法
	GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error)
	// 客户端发送stream
	UpdateProductStockClient(ProdService_UpdateProductStockClientServer) error
	// 服务端发送stream
	UpdateProductStockServer(*ProductRequest, ProdService_UpdateProductStockServerServer) error
	// 双向
	UpdateProductStockBidirect(ProdService_UpdateProductStockBidirectServer) error
	mustEmbedUnimplementedProdServiceServer()
}

// UnimplementedProdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (UnimplementedProdServiceServer) GetProductStock(context.Context, *ProductRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductStock not implemented")
}
func (UnimplementedProdServiceServer) UpdateProductStockClient(ProdService_UpdateProductStockClientServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProductStockClient not implemented")
}
func (UnimplementedProdServiceServer) UpdateProductStockServer(*ProductRequest, ProdService_UpdateProductStockServerServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProductStockServer not implemented")
}
func (UnimplementedProdServiceServer) UpdateProductStockBidirect(ProdService_UpdateProductStockBidirectServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProductStockBidirect not implemented")
}
func (UnimplementedProdServiceServer) mustEmbedUnimplementedProdServiceServer() {}

// UnsafeProdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdServiceServer will
// result in compilation errors.
type UnsafeProdServiceServer interface {
	mustEmbedUnimplementedProdServiceServer()
}

func RegisterProdServiceServer(s grpc.ServiceRegistrar, srv ProdServiceServer) {
	s.RegisterService(&ProdService_ServiceDesc, srv)
}

func _ProdService_GetProductStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetProductStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProdService/GetProductStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetProductStock(ctx, req.(*ProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_UpdateProductStockClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).UpdateProductStockClient(&prodServiceUpdateProductStockClientServer{stream})
}

type ProdService_UpdateProductStockClientServer interface {
	SendAndClose(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceUpdateProductStockClientServer struct {
	grpc.ServerStream
}

func (x *prodServiceUpdateProductStockClientServer) SendAndClose(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceUpdateProductStockClientServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProdService_UpdateProductStockServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProdServiceServer).UpdateProductStockServer(m, &prodServiceUpdateProductStockServerServer{stream})
}

type ProdService_UpdateProductStockServerServer interface {
	Send(*ProductResponse) error
	grpc.ServerStream
}

type prodServiceUpdateProductStockServerServer struct {
	grpc.ServerStream
}

func (x *prodServiceUpdateProductStockServerServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProdService_UpdateProductStockBidirect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProdServiceServer).UpdateProductStockBidirect(&prodServiceUpdateProductStockBidirectServer{stream})
}

type ProdService_UpdateProductStockBidirectServer interface {
	Send(*ProductResponse) error
	Recv() (*ProductRequest, error)
	grpc.ServerStream
}

type prodServiceUpdateProductStockBidirectServer struct {
	grpc.ServerStream
}

func (x *prodServiceUpdateProductStockBidirectServer) Send(m *ProductResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *prodServiceUpdateProductStockBidirectServer) Recv() (*ProductRequest, error) {
	m := new(ProductRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProdService_ServiceDesc is the grpc.ServiceDesc for ProdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductStock",
			Handler:    _ProdService_GetProductStock_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateProductStockClient",
			Handler:       _ProdService_UpdateProductStockClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateProductStockServer",
			Handler:       _ProdService_UpdateProductStockServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateProductStockBidirect",
			Handler:       _ProdService_UpdateProductStockBidirect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "product.proto",
}
